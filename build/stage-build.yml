steps:

- task: gitversion/setup@0
  inputs:
    versionSpec: '5.10.1'
  displayName: 'Install GitVersion'

- task: gitversion/execute@0
  inputs:
    useConfigFile: true
    configFilePath: $(Build.SourcesDirectory)/build/gitversion.yml
  displayName: 'Calculate version'

- task: NuGetAuthenticate@1
  inputs:
    forceReinstallCredentialProvider: true
    
- task: DotNetCoreCLI@2
  displayName: 'Install dotnet 6 workloads'
  inputs:
    command: 'custom'
    custom: 'workload'
    arguments: 'install android'

- task: MSBuild@1
  displayName: 'Restore solution packages'
  inputs:
    solution: $(Build.SourcesDirectory)/$(SolutionFileName)
    msbuildLocationMethod: version
    msbuildVersion: latest
    msbuildArchitecture: x86
    msbuildArguments: >
      /t:restore
    configuration: $(ApplicationConfiguration)
    platform: $(ApplicationPlatform)
    clean: false
    maximumCpuCount: true
    restoreNugetPackages: false
    logProjectEvents: false
    createLogFile: false

- task: MSBuild@1
  displayName: 'Build solution in $(ApplicationConfiguration) | $(ApplicationPlatform)'
  inputs:
    solution: $(Build.SourcesDirectory)/$(SolutionFileName)
    msbuildLocationMethod: version
    msbuildVersion: latest
    msbuildArchitecture: x86
    configuration: $(ApplicationConfiguration)
    platform: $(ApplicationPlatform)
    clean: false
    maximumCpuCount: true
    restoreNugetPackages: false
    logProjectEvents: false
    createLogFile: false
    msbuildArguments: > # Set the version of the packages, will have no effect on application projects (Heads).
      /p:PackageVersion=$(GitVersion.SemVer) 
      /p:ContinuousIntegrationBuild=true

- script: >
    dotnet test $(Build.SourcesDirectory)/$(SolutionFileName)
    /p:Configuration=$(ApplicationConfiguration)
    /p:CollectCoverage=true 
    /p:CoverletOutputFormat=cobertura
    /p:CoverletOutput=$(Build.SourcesDirectory)/coverage
    /p:ExcludeByFile="**/*.g.cs"
    --logger trx
    --no-build
  displayName: 'Run tests'
  condition: and(succeeded(), eq(variables['ApplicationPlatform'], 'NuGet'))

- task: PublishTestResults@2
  displayName: 'Publish test results'
  condition: succeededOrFailed()
  inputs:
    testRunner: VSTest
    testResultsFiles: '**/*.trx'

- task: PublishCodeCoverageResults@1
  displayName: Publish code coverage report
  condition: and(succeededOrFailed(), eq(variables['ApplicationPlatform'], 'NuGet'))
  inputs:
    codeCoverageTool: 'Cobertura'
    summaryFileLocation: "$(Build.SourcesDirectory)/coverage.cobertura.xml"

- task: PublishBuildArtifacts@1
  displayName: 'Publish artifact $(ApplicationConfiguration)'
  inputs:
    PathtoPublish: $(PackageOutputPath)
    ArtifactName: $(ArtifactName)
    ArtifactType: Container

- task: PostBuildCleanup@3
  displayName: 'Post-Build cleanup :  Cleanup files to keep build server clean!'
  condition: always()